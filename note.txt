# example
new
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
export PATH="$PATH:$(go env GOPATH)/bin"

git tag v1.0.7
git push origin v1.0.7

// tool for test
brew install grpcurl  # macOS
sudo apt install grpcurl  # Ubuntu/Debian
choco install grpcurl  # Windows (via Chocolatey)

//grpcurl -plaintext -d '{"id": "1"}' localhost:50051 product.ProductServiceServer/GetProduct
grpcurl -plaintext -d '{"id": 1}' localhost:50051 product.ProductService/GetProductById

export PATH="$PATH:$(go env GOPATH)/bin"
protoc -I proto/ -I third_party/googleapis \
  --go_out=gen --go_opt=paths=source_relative \
  --go-grpc_out=gen --go-grpc_opt=paths=source_relative \
  --grpc-gateway_out=gen --grpc-gateway_opt=paths=source_relative \
  proto/product.proto

git clone https://github.com/googleapis/googleapis.git third_party/googleapis
ls third_party/googleapis/google/api/

 Explanation:
 -I proto/: Looks for .proto files in proto/
 -I third_party/googleapis: Ensures google/api/annotations.proto is found
 --go_out=gen: Generates standard Go code
 --go-grpc_out=gen: Generates gRPC server interfaces
 --grpc-gateway_out=gen: Generates RESTful handler code

brew install postgresql
brew services start postgresql
Create Database & User
- psql -U postgres
- CREATE DATABASE golang_order;

Create a User & Grant Access
- CREATE USER golang_user WITH ENCRYPTED PASSWORD 'strongpassword';
- GRANT ALL PRIVILEGES ON DATABASE golang_order TO golang_user;
Connect PostgreSQL in Golang
- go get github.com/jackc/pgx/v5
db/database.go


curl -X GET "http://localhost:8080/v1/products?limit=10&offset=0&name=" | jq

CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    price DECIMAL(10,2) NOT NULL,
    stock INT NOT NULL DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
INSERT INTO products (name, description, price, stock)
VALUES
    ('Laptop', 'High-performance laptop', 1200.99, 10),
    ('Smartphone', 'Latest model smartphone', 899.50, 25),
    ('Headphones', 'Noise-canceling headphones', 199.99, 50),
    ('Gaming Mouse', 'RGB gaming mouse', 59.99, 100),
    ('Mechanical Keyboard', 'RGB mechanical keyboard', 129.99, 75),
    ('Smartwatch', 'Fitness tracking smartwatch', 249.99, 30),
    ('Tablet', '10-inch display tablet', 499.00, 20),
    ('Monitor', '27-inch 4K monitor', 399.99, 15),
    ('External SSD', '1TB portable SSD', 149.99, 40),
    ('Wireless Speaker', 'Bluetooth wireless speaker', 79.99, 60);

    SELECT current_user;
    GRANT SELECT, INSERT, UPDATE, DELETE ON products TO golang_user;
    GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO golang_user;