# example
new
go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-grpc-gateway@latest
go install github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2@latest
export PATH="$PATH:$(go env GOPATH)/bin"

git tag v1.0.7
git push origin v1.0.7

// tool for test
brew install grpcurl  # macOS
sudo apt install grpcurl  # Ubuntu/Debian
choco install grpcurl  # Windows (via Chocolatey)

grpcurl -plaintext -d '{"id": "1"}' localhost:50051 product.ProductService/GetProduct

protoc -I proto/ -I third_party/googleapis \
  --go_out=gen --go_opt=paths=source_relative \
  --go-grpc_out=gen --go-grpc_opt=paths=source_relative \
  --grpc-gateway_out=gen --grpc-gateway_opt=paths=source_relative \
  proto/product.proto

git clone https://github.com/googleapis/googleapis.git third_party/googleapis
ls third_party/googleapis/google/api/

 Explanation:
 -I proto/: Looks for .proto files in proto/
 -I third_party/googleapis: Ensures google/api/annotations.proto is found
 --go_out=gen: Generates standard Go code
 --go-grpc_out=gen: Generates gRPC server interfaces
 --grpc-gateway_out=gen: Generates RESTful handler code

brew install postgresql
brew services start postgresql
Create Database & User
- psql -U postgres
- CREATE DATABASE golang_order;

Create a User & Grant Access
- CREATE USER golang_user WITH ENCRYPTED PASSWORD 'strongpassword';
- GRANT ALL PRIVILEGES ON DATABASE golang_order TO golang_user;
Connect PostgreSQL in Golang
- go get github.com/jackc/pgx/v5
db/database.go